buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    ext {
        appVersion='0.0.0'
        javaVersion='11'
        springBootVersion="2.6.10"
        springCloudVersion="2021.0.3"
        springDependencyManagementVersion="1.0.12.RELEASE"
        jibGradleVersion="3.2.1"
        spockVersion="2.1-groovy-3.0"
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyManagementVersion}"

        classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:${jibGradleVersion}"
    }
}

subprojects {
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'java'
    apply plugin: "groovy"
    apply plugin: 'jacoco'

    project.group 'me.zeroest.pinpoint-example'
    project.version "${appVersion}"

    sourceCompatibility = javaVersion

    repositories {
        mavenCentral()
    }

    dependencyManagement{
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "org.spockframework:spock-bom:${spockVersion}"
        }

        dependencies {
            dependencySet(group: "org.springframework.boot", version: "${springBootVersion}") {
                entry "spring-boot-starter-web"
                entry "spring-boot-starter-test"
            }

            dependencySet(group: "org.projectlombok", version: "1.18.22") {
                entry "lombok"
            }
        }
    }

    dependencies {
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'

        compileOnly "org.projectlombok:lombok"
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        // https://github.com/spockframework/spock-example/blob/master/build.gradle

        // mandatory dependencies for using Spock
        implementation 'org.codehaus.groovy:groovy-all:3.0.10'

        testImplementation "org.spockframework:spock-core"
        testImplementation "org.spockframework:spock-spring"
    }


    // https://docs.gradle.org/current/dsl/org.gradle.testing.jacoco.tasks.JacocoReport.html
    // 바이너리 커버리지 결과를 사람이 읽기 좋은 형태의 리포트로 저장합니다. html 파일로 생성해 사람이 쉽게 눈으로 확인할 수도 있고, SonarQube 등으로 연동하기 위해 xml, csv 같은 형태로도 리포트를 생성할 수 있습니다.
    jacocoTestReport {
        reports {
            // 원하는 리포트를 켜고 끌 수 있습니다.
            html.enabled true
            xml.enabled true
            csv.enabled false

//  각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있습니다.
            html.destination file("$buildDir/jacocoHtml")
//            xml.destination file("$buildDir/jacoco.xml")
        }
    }

    // https://docs.gradle.org/current/dsl/org.gradle.testing.jacoco.tasks.JacocoCoverageVerification.html
    // 내가 원하는 커버리지 기준을 만족하는지 확인해 주는 task입니다. 예를 들어, 브랜치 커버리지를 최소한 80% 이상으로 유지하고 싶다면, 이 task에 설정하면 됩니다. test task처럼 Gradle 빌드의 성공/실패로 결과를 보여줍니다.
    jacocoTestCoverageVerification {
        violationRules {
            rule {
                element = 'CLASS'

                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.90
                }
            }
        }
    }

    task testCoverage(type: Test) {
        group 'verification'
        description 'Runs the unit tests with coverage'

        dependsOn('test',
                'jacocoTestReport',
                'jacocoTestCoverageVerification')

        tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
        tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
    }

    test {
        finalizedBy 'jacocoTestReport'
    }

//    jacocoTestReport {
//        finalizedBy 'jacocoTestCoverageVerification'
//    }
}
